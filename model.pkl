features = ["appointment_month", "has_private_insurance", "appointments_per_patient"]

# Base features
X = master_df[features]

# Add categorical features
X = pd.concat([X, master_df[["age_group", "treatment_type"]]], axis=1)

# One-hot encode
X = pd.get_dummies(X, columns=["age_group", "treatment_type"], drop_first=True)

# Target for regression
y = master_df.groupby(["treatment_type", "appointment_month"])["appointment_id"].transform("count")

     
Regression Models

This cell:

Splits data into train/test sets.
Defines multiple regression models (baseline + advanced).
Trains each model and makes predictions.
Calculates MAE, RMSE, R², and cross-validated R².
Stores and prints results for comparison.

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

reg_models = {
    "Baseline": DummyRegressor(strategy="mean"),
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(random_state=42),
}

reg_results = []
for name, model in reg_models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)

    mae = mean_absolute_error(y_test, preds)
    rmse = mean_squared_error(y_test, preds) ** 0.5   # manual RMSE
    r2 = r2_score(y_test, preds)
    cv = cross_val_score(model, X, y, cv=5, scoring="r2").mean()

    reg_results.append([name, mae, rmse, r2, cv])

reg_results_df = pd.DataFrame(reg_results, columns=["Model", "MAE", "RMSE", "R²", "CV R²"])
print("=== Regression Results ===")
print(reg_results_df)

import pickle

# After training + evaluation, save each trained model
for name, model in reg_models.items():
    filename = f"{name.replace(' ', '_').lower()}_model.pkl"
    with open(filename, "wb") as f:
        pickle.dump(model, f)

print("✅ All models saved as .pkl files")
